import telebot
import config
from telebot import types
import calendar_module
import time_module
from db import Database
from datetime import datetime, timedelta
import specialists_module

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu')
    markup.row(btn1)
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –±—ã—Å—Ç–æ –∏ —É–¥–æ–±–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–µ —É—Å–ª—É–≥–∏.',
                     reply_markup=markup)

    db = Database(config.DB_FILE)
    db.init_tables()

    username = message.from_user.first_name
    chat_id = message.chat.id

    count = db.get_user_count(username, chat_id)

    if count == 0:
        db.add_new_user(username, chat_id)

    db.close()

'''    
@bot.message_handler(commands=['star'])
def star1(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes')
    btn2 = types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='no')
    markup.row(btn1, btn2)
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç, —Ç—ã –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ 30 –∞–ø—Ä–µ–ª—è –≤ 10:00 –∫ –º–∞—Å—Ç–µ—Ä—É –ê–Ω–µ.\n–ü–æ–¥—Ç–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≤–∏–∑–∏—Ç üíå',
                     reply_markup=markup)
    bot.send_message(message.chat.id,
                     '–û—Ç–ª–∏—á–Ω–æ. –° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–π —É—é—Ç–Ω–æ–π —Å—Ç—É–¥–∏–∏ ü§ç')
'''

@bot.message_handler(commands=['menu'])
def menu(message):
    markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É')
    btn2 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
    btn3 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å  –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è')
    btn4 = types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –º–æ–∏ –∑–∞–ø–∏—Å–∏')
    markup1.row(btn1)
    markup1.row(btn2)
    markup1.row(btn3)
    markup1.row(btn4)
    bot.send_message(message.chat.id, '–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markup1)


@bot.message_handler(commands=['calendar'])
def send_calendar_command(message):
    calendar_module.send_calendar(bot, message)


@bot.callback_query_handler(func=lambda callback: callback.data == 'menu')
def menu(callback):
    markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É')
    btn2 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')
    btn3 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å  –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è')
    btn4 = types.KeyboardButton('–í—Å–µ –º–æ–∏ –∑–∞–ø–∏—Å–∏')
    btn5 = types.KeyboardButton('–ê–∫—Ü–∏–∏')
    markup1.row(btn1)
    markup1.row(btn2)
    markup1.row(btn3)
    markup1.row(btn4,btn5)
    bot.send_message(callback.message.chat.id, '–û—Ç–ª–∏—á–Ω–æüíï\n–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markup1)


@bot.message_handler(content_types=['text'])
def handle_messages(message):
    chat_id = message.chat.id
    if message.text == '–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É':

        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–ú–∞–Ω–∏–∫—é—Ä', callback_data='manicure')
        btn2 = types.InlineKeyboardButton('–ü–µ–¥–∏–∫—é—Ä', callback_data='pedicure')
        btn3 = types.InlineKeyboardButton('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', callback_data='additional_services')
        markup.row(btn1)
        markup.row(btn2)
        markup.row(btn3)
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–µ—Ç–µ —É—Å–ª—É–≥—É', reply_markup=markup)

    elif message.text == '–í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞':
        db = Database(config.DB_FILE)
        db.init_tables()
    elif message.text == '–í—ã–±—Ä–∞—Ç—å  –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è':
        db = Database(config.DB_FILE)
        db.init_tables()


'''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'''
# —É—Å–ª—É–≥–∞

@bot.callback_query_handler(func=lambda callback: callback.data == 'manicure')
def manicure(callback):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫                    1700—Ä.', callback_data='gel_manicure')
    btn2 = types.InlineKeyboardButton('1700—Ä.', callback_data='ignore', row_width=2)
    btn3 = types.InlineKeyboardButton('–ú–∞–Ω–∏–∫—é—Ä –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è                                     1500—Ä.', callback_data='pedicure')
    markup.row(btn1)
    markup.row(btn3)
    bot.send_message(callback.message.chat.id, '–£—Å–ª—É–≥–∏ –ø–æ –º–∞–Ω–∏–∫—é—Ä—É', reply_markup=markup)

user_appointment = {}



@bot.callback_query_handler(func=lambda callback: callback.data == 'gel_manicure')
def gel_manicure(callback):
    specialists_module.send_specialists_list(bot, callback.message)
    user_appointment[callback.message.chat.id] = {'service': ''}
    user_appointment[callback.message.chat.id]['service'] = '–ú–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫'
    print(user_appointment)


'''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'''
# –¥–∞—Ç–∞
cur_year = datetime.now().year
cur_month = datetime.now().month
selected_dates = []


@bot.callback_query_handler(func=lambda call: call.data in ["PREV-MONTH", "NEXT-MONTH"])
def callback_query(callback):
    global cur_year, cur_month
    cur_year, cur_month = calendar_module.handle_month_change(bot, callback, cur_year, cur_month)


@bot.callback_query_handler(func=lambda call: call.data.startswith("DAY"))
def callback_day(callback):
    global selected_dates
    selected_dates = calendar_module.handle_date_selection(callback, cur_year, cur_month, selected_dates)


@bot.callback_query_handler(func=lambda call: call.data.startswith("done"))
def accept_day(callback):
    if not selected_dates:
        bot.answer_callback_query(callback.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ'")
        return

    date_str = datetime.strptime(selected_dates[0], '%Y-%m-%d')
    english_month = date_str.strftime("%B")
    russian_month = config.MONTHS.get(english_month, english_month)
    formatted_date = f"{date_str.day} {russian_month}"

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞
    now = datetime.strptime(selected_dates[0], '%Y-%m-%d').date()
    print(now)
    today = datetime.now().date()
    if now < today:
        bot.answer_callback_query(callback.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
        selected_dates.clear()
        return
    user_appointment[callback.message.chat.id]['date'] = formatted_date
    print(user_appointment)
    time_module.send_time_table(formatted_date, bot, callback.message)


'''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'''
# –≤—Ä–µ–º—è

selected_time = ''
cur_day = ''
doble_selected_days = selected_dates

@bot.callback_query_handler(func=lambda call: call.data.startswith("TIME"))
def callback_day(callback):
    global selected_time
    selected_time = time_module.handle_time_selection(callback, selected_time)


@bot.callback_query_handler(func=lambda call: call.data in ["PREV-DAY", "NEXT-DAY"])
def callback_query(callback):
    cur_day_str, cur_day = time_module.handle_day_change(bot, callback, selected_dates)
    selected_dates[0]=cur_day_str
    if cur_day !=0:
        user_appointment[callback.message.chat.id]['date'] = cur_day



@bot.callback_query_handler(func=lambda call: call.data.startswith("ok"))
def accept_day(callback):
    global selected_time

    if selected_time == '':
        bot.answer_callback_query(callback.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ")
        return

    user_appointment[callback.message.chat.id]['time'] = selected_time
    print(user_appointment)
    selected_time = ''
    db = Database(config.DB_FILE)
    db.init_tables()
    specialist_in_message = db.get_specialist_message_form(user_appointment[callback.message.chat.id]['specialist'])
    db.close()

    bot.send_message(callback.message.chat.id,
                     f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {user_appointment[callback.message.chat.id]['date']} –≤ {user_appointment[callback.message.chat.id]['time']} –∫ –º–∞—Å—Ç–µ—Ä—É {specialist_in_message[0]}")
    uploading_to_db(user_appointment)



def uploading_to_db(user_appointment):
    db = Database(config.DB_FILE)
    db.init_tables()
    chat_id = list(user_appointment.keys())[0]
    service = user_appointment[chat_id]['service']
    specialist = user_appointment[chat_id]['specialist']

    date = user_appointment[chat_id]['date']

    day, month_name = date.split()

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞ –≤ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
    month_number = list(config.MONTHS.values()).index(month_name) + 1

    cur_year = datetime.now().year
    cur_month = datetime.now().month
    if month_number < cur_month:
        cur_year += 1

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD"
    formatted_date = f"{cur_year}-{month_number:02d}-{int(day):02d}"

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    time_str = user_appointment[chat_id]['time']
    time_obj = datetime.strptime(time_str, '%H:%M').time()
    time_str_formatted = time_obj.strftime('%H:%M')

    db.add_appointment(service, specialist, formatted_date, time_str_formatted, False, chat_id)

    db.close()
    user_appointment[chat_id].clear()
    selected_dates.clear()


'''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'''
# —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç

selected_specialist = ''


@bot.callback_query_handler(func=lambda call: call.data.startswith("SPECIALIST"))
def callback_specialist(callback):
    global selected_specialist
    selected_specialist = specialists_module.handle_specialists_selection(callback, selected_specialist)

    user_appointment[callback.message.chat.id]['specialist'] = selected_specialist
    print(user_appointment)
    calendar_module.send_calendar(bot, callback.message)


bot.polling(none_stop=True, timeout=30)
